# Copyright (c) 2021-2024 Arm Limited.
# SPDX-License-Identifier: Apache-2.0
"""Setup script for backward compatibility."""
import multiprocessing
import shutil
import subprocess
from pathlib import Path

from setuptools import setup
from setuptools.command.build_py import build_py


# On "pip install", we compile the project with CMake to build the reference model
# .so file generated by Pybind. Then, we copy the .so to the py_package/ directory,
# which setup.cfg lists as a package_dir
class CMakeBuild(build_py):
    def run(self):
        root_dir = Path(__file__).parent
        build_dir = root_dir / "build"
        build_dir.mkdir(exist_ok=True)
        package_dir = root_dir / "py_package"

        cmake_cmd = [
            "cmake",
            "-DCMAKE_BUILD_TYPE=Release",
            "-DBUILD_TOSA_REFERENCE_MODEL_PYBIND=ON",
            "..",
        ]
        build_cmd = ["cmake", "--build", "."]

        try:
            subprocess.run(cmake_cmd + ["-GNinja"], cwd=build_dir, check=True)
        except Exception:
            subprocess.run(cmake_cmd, cwd=build_dir, check=True)
            build_cmd.append(f"-j{multiprocessing.cpu_count()}")

        subprocess.run(build_cmd, cwd=build_dir, check=True)

        # There should only be one of these but supporting multiple is fine,
        # Python will know which one to import
        for so_file in build_dir.glob("reference_model/tosa_reference_model.*.so"):
            shutil.copy(so_file, package_dir)

        build_py.run(self)


build_pybind = False
if build_pybind:
    setup(cmdclass={"build_py": CMakeBuild})
else:
    setup()
